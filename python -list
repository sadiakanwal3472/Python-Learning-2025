{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8c00dc74-ae14-4474-b089-af1ddecb8c03",
   "metadata": {},
   "source": [
    "# Python Lists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8614d751-0f7e-48e5-9788-eb19de54438e",
   "metadata": {},
   "outputs": [],
   "source": [
    "mylist = [\"apple\", \"banana\", \"cherry\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e98f1d5-f8b1-444f-b4d9-50ba5a0b0dda",
   "metadata": {},
   "source": [
    "# List"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d87ca7b-7eba-4bba-a49d-0aadc3f83b9c",
   "metadata": {},
   "source": [
    "Lists are used to store multiple items in a single variable.\n",
    "\n",
    "Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.\n",
    "\n",
    "Lists are created using square brackets:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9f18099-b33e-4e8b-b633-c475b9b435e5",
   "metadata": {},
   "source": [
    "Example:\n",
    "Create a List:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f03f5382-9028-414d-a0b1-2a74dbc55f13",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['apple', 'banana', 'cherry']\n"
     ]
    }
   ],
   "source": [
    "thislist = [\"apple\", \"banana\", \"cherry\"]\n",
    "print(thislist)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "479c549d-785c-4bd0-8792-c56913ad002f",
   "metadata": {},
   "source": [
    "# List Items"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf007189-fff8-43a8-bb83-6079ef3e2a77",
   "metadata": {},
   "source": [
    "List items are ordered, changeable, and allow duplicate values.\n",
    "\n",
    "List items are indexed, the first item has index [0], the second item has index [1] etc.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd923920-4b31-4397-aaec-096d81b9e30d",
   "metadata": {},
   "source": [
    "# Ordered"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bea8b8e-052e-4554-b711-0fe713184950",
   "metadata": {},
   "source": [
    "When we say that lists are ordered, it means that the items have a defined order, and that order will not change.\n",
    "\n",
    "If you add new items to a list, the new items will be placed at the end of the list."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2e0eec1-1766-472d-95dd-d0c3189cd193",
   "metadata": {},
   "source": [
    "Note: There are some list methods that will change the order, but in general: the order of the items will not change."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb5a2370-a2db-4a95-8cf3-7abbd03e2f45",
   "metadata": {},
   "source": [
    "# Changeable"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb3a9ff6-3028-4aa3-94d6-f0da2b9ea06f",
   "metadata": {},
   "source": [
    "The list is changeable, meaning that we can change, add, and remove items in a list after it has been created."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4f0f033-e1ef-4d8e-a938-2c1923dc6d41",
   "metadata": {},
   "source": [
    "# Allow Duplicates"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca75d0ab-5c49-49bd-abba-1aebf9fc7cee",
   "metadata": {},
   "source": [
    "Since lists are indexed, lists can have items with the same value:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66da84b5-f4c1-44e5-8f4a-ff9984444877",
   "metadata": {},
   "source": [
    "# Example:\n",
    "Lists allow duplicate values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "88235c46-d622-4176-b84e-816dc7e9da6e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['apple', 'banana', 'cherry', 'apple', 'cherry']\n"
     ]
    }
   ],
   "source": [
    "thislist = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\"]\n",
    "print(thislist)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1ab5fa0-d5c1-4f69-a47c-f26bdd9ccd8c",
   "metadata": {},
   "source": [
    "# List Length"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5803c513-5351-4d89-b9c8-07ff6b6763f9",
   "metadata": {},
   "source": [
    "To determine how many items a list has, use the len() function:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8e08f9c-81be-4cae-ace6-ab5d352b6007",
   "metadata": {},
   "source": [
    "# Example\n",
    "Print the number of items in the list:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "220f63ee-78a2-4d6d-88fa-4cfeba10cab4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "thislist=[\"apple\", \"banana\", \"cherry\"]\n",
    "print(len(thislist))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5964a91a-7bef-4e0d-84d5-c9b25588da65",
   "metadata": {},
   "source": [
    "# List Items - Data Types"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0b71548-e820-4d42-b84c-b6a52b2e5f74",
   "metadata": {},
   "source": [
    "List items can be of any data type:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81ff7e28-2594-4c23-9b82-4a3275aa2330",
   "metadata": {},
   "source": [
    "# Example\n",
    "String, int and boolean data types:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7845431a-d472-48d4-89eb-2dab45fbe025",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['apple', 'banana', 'cherry', 1, 5, 7, 9, 3, True, False, False]\n"
     ]
    }
   ],
   "source": [
    "list1 = [\"apple\", \"banana\", \"cherry\"]\n",
    "list2 = [1, 5, 7, 9, 3]\n",
    "list3 = [True, False, False]\n",
    "list=list1+list2+list3\n",
    "print(list)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85dc6406-710e-4eff-98c2-0f5983ec67a6",
   "metadata": {},
   "source": [
    "A list can contain different data types:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d405e096-7a7c-44fe-aa82-1151abd9b9d7",
   "metadata": {},
   "source": [
    "# Example\n",
    "A list with strings, integers and boolean values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c678f36f-0c80-49bf-8094-e16826cd4f0c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['abc', 34, True, 40, 'male']\n"
     ]
    }
   ],
   "source": [
    "list1 = [\"abc\", 34, True, 40, \"male\"]\n",
    "print(list1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "642f1629-69ae-4297-a9e7-17516e9371fe",
   "metadata": {},
   "source": [
    "# type()\n",
    "From Python's perspective, lists are defined as objects with the data type 'list':\n",
    "\n",
    "<class 'list'>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec55fab5-5b41-430d-8aa9-f8719b2e563d",
   "metadata": {},
   "source": [
    "# Example\n",
    "What is the data type of a list?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "75c92f64-c648-4d7c-b44a-75d21e7efb8f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'list'>\n"
     ]
    }
   ],
   "source": [
    "mylist = [\"apple\", \"banana\", \"cherry\"]\n",
    "print(type(mylist))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2507ec1d-0974-4c34-b83a-69e2fff6141f",
   "metadata": {},
   "source": [
    "# The list() Constructor\n",
    "It is also possible to use the list() constructor when creating a new list."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97724a4c-5a20-4cf9-b989-d92bd9afd838",
   "metadata": {},
   "source": [
    "# Example\n",
    "Using the list() constructor to make a List:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9b894ba2-9b50-4df8-a796-cfbd570ea0ae",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unterminated string literal (detected at line 1) (1075377313.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[24], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    thislist=[\"apple\", \"banana\", \"cherry]\u001b[0m\n\u001b[1;37m                                 ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m unterminated string literal (detected at line 1)\n"
     ]
    }
   ],
   "source": [
    "thislist=[\"apple\", \"banana\", \"cherry] \n",
    "print(thislist)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71320167-cd56-49d8-a026-f0408ddbecf6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
